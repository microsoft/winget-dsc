# winget-dsc pipeline to publish module artifacts
name: '$(Build.DefinitionName)-$(Build.DefinitionVersion)-$(Date:yyyyMMdd)-$(Rev:r)'

trigger: none

parameters: # parameters are shown up in ADO UI in a build queue time

- name: moduleName
  displayName: 'Name of the module to publish to the PSGallery'
  type: string

- name: moduleVersion
  displayName: 'Version of the module'
  type: string

variables:
  # Docker image which is used to build the project
  WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2019/vse2022:latest'

resources:
  repositories:
    - repository: self
      type: git
      ref: refs/heads/main

    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@templates
  parameters:
    globalSdl:
      tsa:
        enabled: false
    platform:
      name: 'onebranch'
    release:
      category: NonAzure
    git:
      fetchTags: false

    stages:
      - stage: Prepare
        jobs:
        - job: Prepare_Sign
          displayName: Prepare and sign ${{ parameters.moduleName }}
          pool:
            type: windows
          variables:
            ob_outputDirectory: $(Build.ArtifactStagingDirectory)/${{ parameters.moduleName }}

          steps:
          - task: NuGetToolInstaller@1
            displayName: 'Use NuGet 6.x'
            inputs:
              versionSpec: 6.x

          - task: PowerShell@2
            displayName: Replace module version
            inputs:
              targetType: inline
              pwsh: true
              script: |
                $manifestContent = (Get-Content -path $(Build.SourcesDirectory)\resources\${{ parameters.moduleName }}\${{ parameters.moduleName }}.psd1 -Raw)

                $newManifestContent = $manifestContent -replace "'0.1.0'", "'${{ parameters.moduleVersion }}'"

                Set-Content -path $(Build.SourcesDirectory)\resources\${{ parameters.moduleName }}\${{ parameters.moduleName }}.psd1 -Value $newManifestContent

                New-Item ToSign -Type Directory
                Set-Content -path ToSign\${{ parameters.moduleName }}.psd1 -Value $newManifestContent
                Get-Content ToSign\${{ parameters.moduleName }}.psd1 -Raw

                Copy-Item -Path "$(Build.SourcesDirectory)\resources\${{ parameters.moduleName }}\${{ parameters.moduleName }}.psm1" -Destination "ToSign\${{ parameters.moduleName }}.psm1" -Force

          - task: onebranch.pipeline.signing@1
            displayName: 'Sign manifest'
            inputs:
              command: 'sign'
              cp_code: 400 # CP-230012 - Microsoft Corporation (SHA2 Root - Standard Root)
              search_root: $(System.DefaultWorkingDirectory)\ToSign
              files_to_sign: '*'

          - task: PowerShell@2
            displayName: Copy Signed Files and Validate signature
            inputs:
              targetType: inline
              pwsh: true
              script: |
                New-Item ToPublish\${{ parameters.moduleName }} -Type Directory
                $moduleFolder = "ToPublish\${{ parameters.moduleName }}"
                Copy-Item -Path "ToSign\${{ parameters.moduleName }}.psm1" -Destination "ToPublish\${{ parameters.moduleName }}\${{ parameters.moduleName }}.psm1" -Force
                Copy-Item -Path "ToSign\${{ parameters.moduleName }}.psd1" -Destination "ToPublish\${{ parameters.moduleName }}\${{ parameters.moduleName }}.psd1" -Force

                $notValid = Get-ChildItem $moduleFolder -Recurse -Attributes !Directory | Get-AuthenticodeSignature | where { $_.Status -ne 'Valid' }
                if ($null -ne $notValid)
                {
                    $notValid
                    throw "A file is not signed"
                }

          - task: CopyFiles@2
            displayName: Copy files to be published to staging directory
            inputs:
              SourceFolder: ToPublish\${{ parameters.moduleName }}
              targetFolder: $(ob_outputDirectory)
              flattenFolders: true
              contents: |
                *.psm1
                *.psd1

      - stage: Publish
        displayName: Publish to PS Gallery
        dependsOn: Prepare
        variables:
          ob_release_environment: Production

        jobs:
        - job: PublishToGallery
          pool:
            type: release
            os: windows

          templateContext:
            inputs:
            - input: pipelineArtifact
              artifactName: drop_Prepare_Prepare_Sign
              targetPath: $(System.DefaultWorkingDirectory)/ModuleToPublish/${{ parameters.moduleName }}
              itemPattern: |
                *.psm1
                *.psd1

          steps:
          - pwsh: |
              $moduleFolder = "$(System.DefaultWorkingDirectory)/ModuleToPublish/${{ parameters.moduleName }}"
              Get-ChildItem -Path $moduleFolder -Recurse
              $moduleFolderPath = (Resolve-Path $moduleFolder).Path
              Publish-Module -Path $moduleFolderPath -Repository PSGallery -NuGetApiKey $env:api_key -verbose
            displayName: Publish ${{ parameters.moduleName }}'
            env:
              api_key: $(DscSamplesNugetApiKey)
